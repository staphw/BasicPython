# -*- coding: utf-8 -*-

# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. 
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. 
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. 
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class UserNotNumberError(Exception):
    def __init__(self, message):
        self.message = message

    @staticmethod
    def valid_number(number):
        try:
            return True if float(number) else True
        except ValueError:
            return False

def main():
    numbers_list = []
    while True:
        number = input('Введите число или "stop" для выхода: ')
        if number == 'stop': 
            break
        try:
            if UserNotNumberError.valid_number(number):
                numbers_list.append(float(number))
            else:
                raise UserNotNumberError("Вы ввели не число!")
        except UserNotNumberError as ex:
            print(ex)
            continue
    print(numbers_list)

if __name__ == '__main__':
    main()
